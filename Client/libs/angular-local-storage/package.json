{
  "name": "angular-local-storage",
  "version": "0.1.5",
  "description": "An Angular module that gives you access to the browsers local storage",
  "homepage": "https://github.com/grevory/angular-local-storage",
  "main": "./dist/angular-local-storage.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/grevory/angular-local-storage.git"
  },
  "keywords": [
    "AngularJS",
    "local",
    "storage"
  ],
  "author": {
    "name": "grevory",
    "email": "greg@gregpike.ca"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/grevory/angular-local-storage/issues"
  },
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-cli": "~0.1.9",
    "grunt-contrib-concat": "*",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-uglify": "*",
    "grunt-karma": "latest",
    "karma": "~0.12.16",
    "karma-jasmine": "~0.1.5",
    "karma-coverage": "^0.2.6",
    "karma-phantomjs-launcher": "~0.1.4",
    "load-grunt-tasks": "~0.3.0",
    "time-grunt": "~0.2.9"
  },
  "readme": "angular-local-storage\n=====================\n\nAn Angular module that gives you access to the browsers local storage, **v0.1.4**\n\n[![Build Status](https://secure.travis-ci.org/grevory/angular-local-storage.png?branch=master)](https://travis-ci.org/grevory/) [![Coverage Status](https://img.shields.io/coveralls/grevory/angular-local-storage.svg)](https://coveralls.io/r/grevory/angular-local-storage?branch=master)\n\n##Table of contents:\n- [Get Started](#get-started)\n- [Development](#development)\n- [Configuration](#configuration)\n - [setPrefix](#setprefix)\n - [setStorageType](#setstoragetype)\n - [setStorageCookie](#setstoragecookie)\n - [setStorageCookieDomain](#setstoragecookiedomain)\n - [setNotify](#setnotify)\n - [Example](#configuration-example)\n- [API Documentation](#api-documentation)\n - [isSupported](#issupported)\n - [getStorageType](#getstoragetype)\n - [set](#set)\n - [get](#get)\n - [keys](#keys)\n - [remove](#remove)\n - [clearAll](#clearall)\n - [bind](#bind)\n - [deriveKey](#derivekey)\n - [length](#length)\n - [cookie](#cookie)\n    - [isSupported](#cookieissupported)\n    - [set](#cookieset)\n    - [get](#cookieget)\n    - [remove](#cookieremove)\n    - [clearAll](#cookieclearall)\n\n##Get Started\n**(1)** You can install angular-local-storage using 2 different ways:<br/>\n**Git:**\nclone & build [this](https://github.com/grevory/angular-local-storage.git) repository<br/>\n**Bower:**\n```bash\n$ bower install angular-local-storage\n```\n**npm:**\n```bash\n$ npm install angular-local-storage\n```\n**(2)** Include `angular-local-storage.js` (or `angular-local-storage.min.js`) in your `index.html`, after including Angular itself.\n\n**(3)** Add `'LocalStorageModule'` to your main module's list of dependencies.\n\nWhen you're done, your setup should look similar to the following:\n\n```html\n<!doctype html>\n<html ng-app=\"myApp\">\n<head>\n   \n</head>\n<body>\n    ...\n    <script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js\"></script>\n    <script src=\"bower_components/js/angular-local-storage.min.js\"></script>\n    ...\n    <script>\n        var myApp = angular.module('myApp', ['LocalStorageModule']);\n\n    </script>\n    ...\n</body>\n</html>\n```\n##Configuration\n###setPrefix\nYou could set a prefix to avoid overwriting any local storage variables from the rest of your app<br/>\n**Default prefix:** `ls.<your-key>`\n```js\nmyApp.config(function (localStorageServiceProvider) {\n  localStorageServiceProvider\n    .setPrefix('yourAppName');\n});\n```\n###setStorageType\nYou could change web storage type to localStorage or sessionStorage<br/>\n**Default storage:** `localStorage`\n```js\nmyApp.config(function (localStorageServiceProvider) {\n  localStorageServiceProvider\n    .setStorageType('sessionStorage');\n});\n```\n###setStorageCookie\nSet cookie options (usually in case of fallback)<br/>\n**expiry:** number of days before cookies expire (0 = does not expire). **default:** `30`<br/>\n**path:** the web path the cookie represents. **default:** `'/'`\n```js\nmyApp.config(function (localStorageServiceProvider) {\n  localStorageServiceProvider\n    .setStorageCookie(45, '<path>');\n});\n```\n###setStorageCookieDomain\nSet the cookie domain, since this runs inside a the `config()` block, only providers and constants can be injected.  As a result, `$location` service can't be used here, use a hardcoded string or `window.location`.<br/>\n**No default value**\n```js\nmyApp.config(function (localStorageServiceProvider) {\n  localStorageServiceProvider\n    .setStorageCookieDomain('<domain>');\n});\n```\n###setNotify\nSend signals for each of the following actions:<br/>\n**setItem** , default: `true`<br/>\n**removeItem** , default: `false`\n```js\nmyApp.config(function (localStorageServiceProvider) {\n  localStorageServiceProvider\n    .setNotify(true, true);\n});\n```\n###Configuration Example\nUsing all together\n```js\nmyApp.config(function (localStorageServiceProvider) {\n  localStorageServiceProvider\n    .setPrefix('myApp')\n    .setStorageType('sessionStorage')\n    .setNotify(true, true)\n});\n```\n##API Documentation\n##isSupported\nChecks if the browser support the current storage type(e.g: `localStorage`, `sessionStorage`).\n**Returns:** `Boolean`\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  if(localStorageService.isSupported) {\n    //...\n  }\n  //...\n});\n```\n###getStorageType\n**Returns:** `String`\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  var storageType = localStorageService.getStorageType(); //e.g localStorage\n  //...\n});\n```\n###set\nDirectly adds a value to local storage.<br/>\nIf local storage is not supported, use cookies instead.<br/>\n**Returns:** `Boolean`\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  function submit(key, val) {\n   return localStorageService.set(key, value);\n  }\n  //...\n});\n```\n###get\nDirectly get a value from local storage.<br/>\nIf local storage is not supported, use cookies instead.<br/>\n**Returns:** `value from local storage`\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  function getItem(key) {\n   return localStorageService.get(key);\n  }\n  //...\n});\n```\n###keys\nReturn array of keys for local storage, ignore keys that not owned.<br/>\n**Returns:** `value from local storage`\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  var lsKeys = localStorageService.keys();\n  //...\n});\n```\n###remove\nRemove an item from local storage by key.<br/>\nIf local storage is not supported, use cookies instead.<br/>\n**Returns:** `Boolean`\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  function removeItem(key) {\n   return localStorageService.remove(key);\n  }\n  //...\n});\n```\n###clearAll\nRemove all data for this app from local storage.<br/>\nIf local storage is not supported, use cookies instead.<br/>\n**Note:** Optionally takes a regular expression string and removes matching.<br/>\n**Returns:** `Boolean`\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  function clearNumbers(key) {\n   return localStorageService.clearAll(/^\\d+$/);\n  }\n  //...\n  function clearAll() {\n   return localStorageService.clearAll();\n  }\n});\n```\n###bind\nBind $scope key to localStorageService.  \n**Usage:** `localStorageService.bind(scope, property, value[optional], key[optional])`  \n***key:*** The corresponding key used in local storage\n**Returns:** deregistration function for this listener.\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  localStorageService.set('property', 'oldValue');\n  $scope.unbind = localStorageService.bind($scope, 'property');\n  \n  //Test Changes\n  $scope.update = function(val) {\n    $scope.property = val;\n    $timeout(function() {\n      alert(\"localStorage value: \" + localStorageService.get('property'));\n    });\n  }\n  //...\n});\n```\n```html\n<div ng-controller=\"MainCtrl\">\n  <p>{{property}}</p>\n  <input type=\"text\" ng-model=\"lsValue\"/>\n  <button ng-click=\"update(lsValue)\">update</button>\n  <button ng-click=\"unbind()\">unbind</button>\n</div>\n```\n\n###deriveKey\nReturn the derive key\n**Returns** `String`\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  localStorageService.set('property', 'oldValue');\n  //Test Result\n  console.log(localStorageService.deriveKey('property')); // ls.property\n  //...\n});\n```\n###length\nReturn localStorageService.length, ignore keys that not owned.  \n**Returns** `Number`\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  var lsLength = localStorageService.length(); // e.g: 7\n  //...\n});\n```\n##Cookie\nDeal with browser's cookies directly.\n##cookie.isSupported\nChecks if cookies are enabled in the browser.\n**Returns:** `Boolean`\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  if(localStorageService.cookie.isSupported) {\n    //...\n  }\n  //...\n});\n```\n###cookie.set\nDirectly adds a value to cookies.<br/>\n**Note:** Typically used as a fallback if local storage is not supported.<br/>\n**Returns:** `Boolean`\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  function submit(key, val) {\n   return localStorageService.cookie.set(key, value);\n  }\n  //...\n});\n```\n###cookie.get\nDirectly get a value from a cookie.<br/>\n**Returns:** `value from local storage`\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  function getItem(key) {\n   return localStorageService.cookie.get(key);\n  }\n  //...\n});\n```\n###cookie.remove\nRemove directly value from a cookie.<br/>\n**Returns:** `Boolean`\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  function removeItem(key) {\n   return localStorageService.cookie.remove(key);\n  }\n  //...\n});\n```\n###clearAll\nRemove all data for this app from cookie.<br/>\n```js\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\n  //...\n  function clearAll() {\n   return localStorageService.cookie.clearAll();\n  }\n});\n```\n\nCheck out the full demo at http://gregpike.net/demos/angular-local-storage/demo.html\n\n##Development:\n* Don't forget about tests.\n* If you planning add some feature please create issue before.\n\nClone the project: \n```sh\n$ git clone https://github.com/<your-repo>/angular-local-storage.git\n$ npm install\n$ bower install\n```\nRun the tests:\n```sh\n$ grunt test\n```\n**Deploy:**<br/>\nRun the build task, update version before(bower,package)\n```sh\n$ grunt dist\n$ git tag 0.*.*\n$ git push origin master --tags\n```\n\n\n",
  "readmeFilename": "README.md",
  "_id": "angular-local-storage@0.1.5",
  "_shasum": "f5c435726acc995a30c9c504ee671a3dd529fef5",
  "_from": "angular-local-storage@^0.1.5",
  "_resolved": "https://registry.npmjs.org/angular-local-storage/-/angular-local-storage-0.1.5.tgz"
}
